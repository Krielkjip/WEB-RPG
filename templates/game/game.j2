<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Game</title>
    <style>
        /* Ensure the HTML and body elements take up the full height of the viewport and have no margin */
        html, body {
            height: 100%;
            margin: 0;
        }

        /* Set the background and text color of the body */
        body {
            background-color: #18191a;
            color: white;
        }

        /* Styling for error messages */
        .error {
            border: 2px solid red;
            padding: 5px;
            display: inline-block;
        }

        /* Styling for error icons */
        .error-icon {
            color: red;
            margin-right: 5px;
        }

        /* Styling for the top navigation bar */
        .top-bar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-left: 20px;
            padding-right: 20px;
            background-color: #3c1178;
            border-bottom: 2px solid white;
        }

        /* Container for buttons in the top bar */
        .top-bar .buttons-container {
            display: flex;
            gap: 20px;
        }

        /* Additional styling for buttons in the top bar */
        .top-bar button {
            margin-left: auto;
        }

        /* Main container for the page content */
        .container {
            display: flex;
            flex: 1;
            height: calc(100% - 82px);
        }

        /* Styling for left and right boxes in the main container */
        .box-1, .box-2 {
            flex: 1;
            padding-left: 20px;
        }

        /* Add border to the right side of the left box */
        .box-1 {
            border-right: 2px solid white;
        }

        /* Modal window styling */
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.8);
        }

        /* Modal content styling */
        .modal-content {
            background-color: #3c1178;
            margin: 15% auto;
            padding: 20px;
            border: 2px solid white;
            width: 80%;
            max-width: 500px;
            text-align: center;
            border-radius: 5px;
        }

        /* Additional modal content styling for information modals */
        .modal-content-info {
            background-color: #3c1178;
            margin: 10% auto;
            padding: 20px;
            border: 2px solid white;
            width: 80%;
            max-width: 700px;
            text-align: center;
            border-radius: 5px;
        }

        /* Styling for purple buttons */
        .button_purple {
            padding: 10px;
            cursor: pointer;
            border: 1px solid white;
            background-color: #3c1178;
            color: white;
            margin-bottom: 4px;
            border-radius: 5px;
        }

        /* Styling for movement buttons */
        .button_move {
            padding: 10px;
            cursor: pointer;
            border: 1px solid white;
            background-color: #3c1178;
            color: white;
            margin-bottom: 4px;
            width: 40px;
            height: 40px;
            border-radius: 5px;
        }

        /* Styling for gray buttons */
        .button_gray {
            padding: 10px;
            cursor: pointer;
            border: 1px solid white;
            background-color: #18191a;
            color: white;
            margin-bottom: 4px;
            border-radius: 5px;
        }

        /* Container for command buttons */
        .commands-container {
            display: flex;
            gap: 10px;
            align-items: center;
        }

        /* Tooltip styling */
        #hover-text {
            display: none;
            position: absolute;
            background-color: #3c1178;
            border: 1px solid white;
            padding: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            font-size: 14px;
            color: white;
            pointer-events: none;
            border-radius: 5px;
        }

        /* Card styling */
        .card {
            background-color: #18191a;
            border: 2px solid white;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            text-align: center;
            width: 300px;
            display: inline-block;
            margin-right: 20px;
        }

        /* Profile picture styling */
        .profile-pic {
            width: 100%;
            height: auto;
        }

        /* Additional text styling */
        .name {
            margin-bottom: 0;
        }

        .name-description {
            margin-top: 0;
        }
    </style>
</head>
<body>
<div class="top-bar">
    <h1>World Map</h1>
    <div class="buttons-container">
        <!-- Display the save button if a save location is provided -->
        {% if save_location != "" %}
            <form action="/index" method="POST">
                <button class="button_gray" type="submit" name="command" value="save {{ save_location }}">Save
                    to: {{ save_location }}</button>
            </form>
        {% endif %}
        <!-- Button to open the quit game modal -->
        <button class="button_gray" id="openModalBtn">Quit Game</button>

        <!-- Quit game modal structure -->
        <div id="myModal" class="modal">
            <div class="modal-content">
                <p>You are about to quit the game do you wish to save before quitting?</p>
                <!-- Display save option if a save location is provided -->
                {% if save_location != "" %}
                    <form id="saveForm" action="/index" method="POST">
                        <input type="hidden" name="command" value="save {{ save_location }}">
                    </form>
                    <button class="button_gray" style="margin-right: 20px" onclick="saveAndRedirect()">Quit With
                        Saving
                    </button>
                {% else %}
                    <p>Save your game with the "save (your game name)" command before easy save is available</p>
                {% endif %}

                <button class="button_gray" style="margin-right: 20px" onclick="location.href='/'">Quit Without Saving
                </button>
                <span class="close button_gray">Cancel</span>
            </div>
        </div>
    </div>
</div>

<div class="container">
    <div class="box-1">
        <h2>World Map</h2>

        <!-- Display a message if the map is not available -->
        {% if map is none %}
            <p>Map is null</p>
        {% else %}
            <!-- Define the type map with terrain types and their display properties -->
            {% set type_map = {'Taiga': {'char': 'T', 'color': 'white'},
                      'Rainforest': {'char': 'R', 'color': 'forestgreen'},
                      'Grassland': {'char': 'G', 'color': 'lightgreen'},
                      'Mountain': {'char': 'M', 'color': 'gray'},
                      'Forest': {'char': 'F', 'color': 'darkgreen'},
                      'Volcano': {'char': 'V', 'color': 'red'},
                      'Desert': {'char': 'D', 'color': 'sandybrown'},
                      'Ocean': {'char': 'O', 'color': 'dodgerblue'},
                      'Temperate Forest': {'char': 'W', 'color': 'olivedrab'},
                      'Tundra': {'char': 'A', 'color': 'lightgray'},
                      'Taiga Forest': {'char': 'F', 'color': 'white'},
                      'Savanna': {'char': 'S', 'color': 'khaki'}} %}

            <style>
                /* Grid item styling for the map */
                .grid-item {
                    width: 15px;
                    height: 15px;
                    padding: 5px;
                    font-weight: bold;
                    border: 2px solid black;
                    text-align: center;
                }

                /* Player tile styling */
                .player {
                    width: 15px;
                    height: 15px;
                    background-color: rgba(255, 255, 255, 0.2);
                    border: 3px solid yellow;
                    font-weight: bold;
                    text-align: center;
                    padding: 2px;
                }

                /* Table styling for the map grid */
                table {
                    border-collapse: collapse;
                }
            </style>
            {% set map_size = map|length %}
            <span id="hover-text"></span>
            <table>
                <!-- Loop through the map rows and columns to display the map -->
                {% for y in range(map_size) %}
                    <tr>
                        {% for x in range(map_size) %}
                            {% set item = map[x][y] %}
                            {% set type_info = type_map[item] %}
                            <!-- Display player tile with different styling -->
                            {% if player_state["location"][0] == x and player_state["location"][1] == y %}
                                <td class="player tile"
                                    style="color:{{ type_info['color'] }}"
                                    data-text="{{ item }}">{{ type_info['char'] }}
                                </td>
                            {% else %}
                                <!-- Display regular grid item -->
                                <td class="grid-item tile"
                                    style="color:{{ type_info['color'] }}"
                                    data-text="{{ item }}">{{ type_info['char'] }}
                                </td>
                            {% endif %}
                        {% endfor %}
                    </tr>
                {% endfor %}
            </table>
        {% endif %}
    </div>

    <div class="box-2">
        <!-- Display error messages if any -->
        {% if state.error_msg %}
            <br/>
            <div class="error">
                <span class="error-icon">&#9888;</span>{{ state.error_msg }}
            </div>
            <br>
        {% endif %}
        {% if state.file_not_found %}
            <br/>
            <div class="error">
                <span class="error-icon">&#9888;</span>file:{{ state.command[5:] }} not found
            </div>
            <br>
        {% endif %}

        <!-- Form to send text command -->
        <h2>Send Text Command</h2>
        <form action="/index" method="POST">
            <label for="command">Enter command:</label><br>
            <input class="button_purple" type="text" id="command" name="command" autofocus><br><br>
            <input class="button_purple" type="submit" value="Submit">
        </form>

        <!-- Movement buttons -->
        <H2>Move</H2>
        <form action="/index" method="POST">
            <button class="button_move" style="margin-left: 44px;" type="submit" name="command" value="Move Up">↑
            </button>
            <br>
            <button class="button_move" type="submit" name="command" value="Move Left">←</button>
            <button class="button_move" style="margin-left: 44px;" type="submit" name="command" value="Move Right">→
            </button>
            <br>
            <button class="button_move" style="margin-left: 44px;" type="submit" name="command" value="Move Down">↓
            </button>
        </form>

        <!-- Command buttons -->
        <h2>Commands</h2>
        <div class="commands-container">
            <!-- Form to interact with regions -->
            <form action="/interact" method="POST">
                <button class="button_purple" type="submit" name="interact" value="Interact Get Region">Interact
                </button>
            </form>
            <!-- Button to view inventory -->
            <button class="button_purple" onclick="location.href='/inventory'">Inventory</button>
            <!-- Button to open help modal -->
            <button class="button_purple" id="helpBtn">Help</button>
            <!-- Button to open info modal -->
            <button id="infoBtn" class="button_purple" type="button">Info</button>
        </div>
        {% if command == "help" %}
        {% endif %}
        <!-- Help modal -->
        <div id="myModalHelp" class="modal">
            <div class="modal-content">
                <h2>Commands:</h2>
                <ol style="text-align: start">
                    <li>
                        <h3>Move player:</h3>
                        <ul>
                            <li>move up</li>
                            <li>move down</li>
                            <li>move left</li>
                            <li>move right</li>
                        </ul>
                    </li>
                    <li>
                        <h3>Save, load game:</h3>
                        <ul>
                            <li>save (your save name)</li>
                            <li>load (your save name)</li>
                        </ul>
                    </li>
                </ol>
                <br/>
                <span class="close button_gray">Go Back</span>
            </div>
        </div>

        <!-- Info modal -->
        <div id="myModalInfo" class="modal">
            <div class="modal-content-info">
                <h2>Game Information</h2>
                <p>RuneQuest is a text based RPG game.</p>
                <h3>Developers:</h3>
                <div class="card">
                    <img src="/statics/OnnoteVoortwis.png" alt="Profile Picture" class="profile-pic">
                    <h3 class="name">Onno te Voortwis</h3>
                    <p class="name-description">Programmer and Founder</p>
                </div>
                <div class="card">
                    <img src="/statics/MiniDonzie.png" alt="Profile Picture" class="profile-pic">
                    <h3 class="name">Mini Donzie</h3>
                    <p class="name-description">Art Director</p>
                </div>
                <br/>
                <br/>
                <span class="close button_gray" id="closeInfoBtn">Go Back</span>
            </div>
        </div>

    </div>
</div>
</body>
<script>
    // Function to save form data and redirect
    function saveAndRedirect() {
        const form = document.getElementById('saveForm');
        const formData = new FormData(form);

        // Send form data to server
        fetch('/index', {
            method: 'POST',
            body: formData
        }).then(response => {
            // If save is successful, redirect to home page
            if (response.ok) {
                window.location.href = '/';
            } else {
                // If save fails, show alert
                alert('Save failed!');
            }
        }).catch(error => {
            // If there's an error, log it and show alert
            console.error('Error:', error);
            alert('Save failed!');
        });
    }

    // Get the modal for general purpose
    const modal = document.getElementById("myModal");

    // Get the button that opens the general modal
    const btn = document.getElementById("openModalBtn");

    // Get the <span> element that closes the general modal
    const span = document.getElementsByClassName("close")[0];

    // Event listener for opening the general modal
    btn.onclick = function () {
        modal.style.display = "block";
    }

    // Event listener for closing the general modal
    span.onclick = function () {
        modal.style.display = "none";
    }

    // Get the modal for help
    const modalHelp = document.getElementById("myModalHelp");

    // Get the button that opens the help modal
    const btnHelp = document.getElementById("helpBtn");

    // Get the <span> element that closes the help modal
    const spanHelp = document.getElementsByClassName("close")[1];

    // Event listener for opening the help modal
    btnHelp.onclick = function () {
        modalHelp.style.display = "block";
    }

    // Event listener for closing the help modal
    spanHelp.onclick = function () {
        modalHelp.style.display = "none";
        // Focus on input after help modal is closed
        document.getElementById("command").focus();
    }

    // Check condition and open help modal if true
    {% if command == "help" or command == "h" %}
        modalHelp.style.display = "block";
        // Blur input after help modal is shown
        setTimeout(blur, 50);
    {% endif %}

    // Function to unfocus on text input
    function blur() {
        document.getElementById("command").blur();
    }

    // Get the modal for information
    const modalInfo = document.getElementById("myModalInfo");

    // Get the button that opens the information modal
    const infoBtn = document.getElementById("infoBtn");

    // Get the span element that closes the information modal
    const closeInfoBtn = document.getElementById("closeInfoBtn");

    // Event listener for opening the information modal
    infoBtn.addEventListener("click", () => {
        modalInfo.style.display = "block";
    });

    // Event listener for closing the information modal
    closeInfoBtn.onclick = function () {
        modalInfo.style.display = "none";
        // Focus on input after information modal is closed
        document.getElementById("command").focus();
    }

    // Check condition and open information modal if true
    {% if command == "info" %}
        modalInfo.style.display = "block";
        // Blur input after information modal is shown
        setTimeout(blur, 50);
    {% endif %}

    // Get all tiles
    const tiles = document.querySelectorAll('.tile');
    const hoverText = document.getElementById('hover-text');

    // Add event listeners for hover functionality on tiles
    tiles.forEach(tile => {
        tile.addEventListener('mousemove', (e) => {
            hoverText.textContent = tile.getAttribute('data-text');
            hoverText.style.display = 'block';
            hoverText.style.left = `${e.pageX + 10}px`;
            hoverText.style.top = `${e.pageY + 10}px`;
        });
        tile.addEventListener('mouseout', () => {
            hoverText.style.display = 'none';
        });
    });

</script>
</html>
